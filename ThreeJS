<html>
	<head>
		<title>Cigna Network Diagram Start</title>
	</head>

	<body>
		
		<script src="js/three.js"></script>
		<script src="js/OrbitControls.js"></script>
		<script src="js/WebGL.js"></script>

		<script>

			var camera, controls, scene, renderer;

			init();
			
			animate();


				// Define actions needed

			function init() {

				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0xcccccc );
				scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.set( 400, 200, 0 );

				// Camera Controls

				controls = new THREE.OrbitControls( camera, renderer.domElement );

				controls.enableDamping = true; 
				controls.dampingFactor = 0.25;

				controls.screenSpacePanning = false;

				controls.minDistance = 100;
				controls.maxDistance = 500;

				controls.maxPolarAngle = Math.PI / 2;



				// Shapes
                var xDistance = 50;
      			var zDistance = 30;
        		var geometry = new THREE.SphereGeometry(10, 10, 10);
        		var material = new THREE.MeshBasicMaterial({
            						color: 0x000000,
            						wireframe: true
       			});
   

        			//Initial offset so does not start in middle.
       			 var xOffset = -80;

        			for (var i = 0; i < 4; i++) {
            		for (var j = 0; j < 3; j++) {
                	var sphere = new THREE.Mesh(geometry, material);
                	sphere.position.x = (xDistance * i) + xOffset;
                	sphere.position.z = (zDistance * j);
                	scene.add(sphere);
            }
        };






				// Lights

				var light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( 1, 1, 1 );
				scene.add( light );

				var light = new THREE.DirectionalLight( 0x002288 );
				light.position.set( - 1, - 1, - 1 );
				scene.add( light );

				var light = new THREE.AmbientLight( 0x222222 );
				scene.add( light );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}
				//Init function End


				// Resize camera for different browser zoom
			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}


				// Tie together
			function animate() {

				requestAnimationFrame( animate );

				controls.update(); 

				render();

			}


				// Submit objects to render engine
			function render() {

				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>
