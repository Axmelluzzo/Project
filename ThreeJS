<html>
    <head>
        <title>ThreeJS Testing</title>
        <style>

            body { 
                margin: 0; 
                }
            canvas {
                width: 100%;
                height: 100%;
                    }

        </style>
    </head>

    <body>
        <script src="JS/three.js"></script>
        <script src="JS/OrbitControls"></script>
        <script src="JS/WebGL.js"></script>
        <script>

            //// WORKAROUND REQUIRE //
            //src="JS/require.js"
            //const THREE = require('three');
            ////////////////////////////////

           // if ( WEBGL.isWebGLAvailable() === false ) {
		    //	document.body.appendChild( WEBGL.getWebGLErrorMessage() );
			//}



            //Scene is what user will be able to see... The overall "world" you're creating
            //Camera is what the user is actually seeing... The current view that will be able to change. Their electronic "eyes"
            //   //   //   The parameters on the camera set the near clipping point and far clipping point
            
            var scene = new THREE.Scene( );
            var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);




            //Renderer is basically the engine that creates teh 3d visualization
            var renderer = new THREE.WebGLRenderer( ); 
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);




            var xDistance = 50;
            var zDistance = 30;
            var geometry = new THREE.SphereGeometry(1,1,1);
            var material = new THREE.MeshBasicMaterial({color:0x00FF00, wireframe:true});
          //  var sphere = new THREE.Mesh(geometry,material)
         //   scene.add(sphere)
            //initial offset so does not start in middle.
            var xOffset = -80;

            for(var i = 0; i < 4; i++){
                for(var j = 0; j < 3; j++){
                        var sphere  = new THREE.Mesh(geometry, material);
                        sphere.position.x = (xDistance * i) + xOffset;
                         sphere.position.z = (zDistance * j);
                          scene.add(sphere);
                                        }
                                    };
            camera.position.z = 100;




                                    ////// Adding obit Controls


                                    //var renderer = new THREE.WebGLRenderer();
                                    //renderer.setSize( window.innerWidth, window.innerHeight );
                                    //document.body.appendChild( renderer.domElement );
                                    //
                                    //var scene = new THREE.Scene();
                                    //
                                    //var camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );
                                    //
                                    //var controls = new THREE.OrbitControls( camera );
                                    //
                                    //          //controls.update() must be called after any manual changes to the camera's transform
                                    //camera.position.set( 0, 20, 100 );
                                    //controls.update();






            //JS Documentation

            var animate = function() {
                requestAnimationFrame(animate);
            //  controls.update();
                renderer.render(scene,camera);
            }


            animate();

            //Checking whether any actions were taking so you can display what the user "requests" --- referred to as game "logic". Used by GameLoop
            //var update = function( )
            //{
              // cube.rotation.x = += 0.01;
             //  cube.rotation.y = += 0.005;
            //};


        </script>

    
    </body>

</html>
