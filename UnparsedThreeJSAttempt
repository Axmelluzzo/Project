<head>
<title> "LosMis" </title>
    <script src="//unpkg.com/3d-force-graph@1"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/qwest/4.4.5/qwest.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/PapaParse/4.1.4/papaparse.min.js"></script>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/d3-collection.v1.min.js"></script>
    <script src="https://d3js.org/d3-dispatch.v1.min.js"></script>
    <script src="https://d3js.org/d3-timer.v1.min.js"></script>
    <script src="https://d3js.org/d3-quadtree.v1.min.js"></script>
    <script src="https://unpkg.com/d3-binarytree"></script>
    <script src="https://unpkg.com/d3-octree"></script>
    <script src="https://unpkg.com/d3-force-3d"></script>
    <script> var simulation = d3.forceSimulation(nodes);</script>
    <script src="index.js"></script>
</head>
<body>
<script>
    function getGraphDataSets() {

const loadMiserables = function(Graph) {
    Graph
        .cooldownTicks(200)
        .nodeLabel('id')
        .nodeAutoColorBy('group')
        .forceEngine('ngraph')
        .jsonUrl('.miserables.json');
};
loadMiserables.description = "<em>Les Miserables</em> data (<a href='https://bl.ocks.org/mbostock/4062045'>4062045</a>)";

//

const loadBlocks = function(Graph) {
    qwest.get('.blocks.json').then((_, data) => {
        data.nodes.forEach(node => { node.name = `${node.user?node.user+': ':''}${node.description || node.id}` });

        Graph
            .cooldownTicks(300)
            .cooldownTime(20000)
            .nodeAutoColorBy('user')
            .forceEngine('ngraph')
            .graphData(data);
    });
};
loadBlocks.description = "<em>Blocks</em> data (<a href='https://bl.ocks.org/mbostock/afecf1ce04644ad9036ca146d2084895'>afecf1ce04644ad9036ca146d2084895</a>)";

//

const loadD3Dependencies = function(Graph) {
    qwest.get('.d3.csv').then((_, csvData) => {
        const { data: [, ...data] } = Papa.parse(csvData); // Parse csv
        data.pop(); // Remove last empty row

        const nodes = [], links = [];
        data.forEach(([size, path]) => {
            const levels = path.split('/'),
                module = levels.length > 1 ? levels[1] : null,
                leaf = levels.pop(),
                parent = levels.join('/');

            nodes.push({
                path,
                leaf,
                module,
                size: +size || 1
            });

            if (parent) {
                links.push({ source: parent, target: path});
            }
        });

        Graph
            .cooldownTicks(300)
            .nodeRelSize(0.5)
            .nodeId('path')
            .nodeVal('size')
            .nodeLabel('path')
            .nodeAutoColorBy('module')
            .forceEngine('ngraph')
            .graphData({ nodes: nodes, links: links });
    });
};
loadD3Dependencies.description = "<em>D3 dependencies</em> data (<a href='https://bl.ocks.org/mbostock/9a8124ccde3a4e9625bc413b48f14b30'>9a8124ccde3a4e9625bc413b48f14b30</a>)";

const tunnel = function(Graph) {

    const perimeter = 12, length = 30;

    const getId = (col, row) => `${col},${row}`;

    let nodes = [], links = [];
    for (let colIdx=0; colIdx<perimeter; colIdx++) {
        for (let rowIdx=0; rowIdx<length; rowIdx++) {
            const id = getId(colIdx, rowIdx);
            nodes.push({id});

            // Link vertically
            if (rowIdx>0) {
                links.push({ source: getId(colIdx, rowIdx-1), target: id });
            }

            // Link horizontally
            links.push({ source: getId((colIdx || perimeter) - 1, rowIdx), target: id });
        }
    }

    Graph
        .cooldownTicks(300)
        .forceEngine('ngraph')
        .graphData({ nodes: nodes, links: links });
};
tunnel.description = "fabric data for a cylindrical tunnel shape";

//

return [loadMiserables, loadBlocks, loadD3Dependencies, tunnel];
}
    
    
const Graph = ForceGraph3D()
	(document.getElementById("3d-graph"));

let curDataSetIdx;
const dataSets = getGraphDataSets();

let toggleData;
(toggleData = function() {
	curDataSetIdx = curDataSetIdx === undefined ? 0 : (curDataSetIdx+1)%dataSets.length;
	const dataSet = dataSets[curDataSetIdx];

	Graph.resetProps(); // Wipe current state
	dataSet(Graph); // Load data set

	document.getElementById('graph-data-description').innerHTML = dataSet.description ? `Viewing ${dataSet.description}` : '';
})(); // IIFE init
    
    
    </script>




</body>
     
